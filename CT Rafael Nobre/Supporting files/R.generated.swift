//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ContactCell`.
    static let contactCell = _R.nib._ContactCell()
    /// Nib `FormLabelFieldCell`.
    static let formLabelFieldCell = _R.nib._FormLabelFieldCell()
    /// Nib `FormTextFieldCell`.
    static let formTextFieldCell = _R.nib._FormTextFieldCell()
    
    /// `UINib(name: "ContactCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactCell) instead")
    static func contactCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactCell)
    }
    
    /// `UINib(name: "FormLabelFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.formLabelFieldCell) instead")
    static func formLabelFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.formLabelFieldCell)
    }
    
    /// `UINib(name: "FormTextFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.formTextFieldCell) instead")
    static func formTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.formTextFieldCell)
    }
    
    static func contactCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactCell? {
      return R.nib.contactCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactCell
    }
    
    static func formLabelFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormLabelFieldCell? {
      return R.nib.formLabelFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormLabelFieldCell
    }
    
    static func formTextFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormTextFieldCell? {
      return R.nib.formTextFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormTextFieldCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactCell`.
    static let contactCell: Rswift.ReuseIdentifier<ContactCell> = Rswift.ReuseIdentifier(identifier: "ContactCell")
    /// Reuse identifier `formLabelFieldCell`.
    static let formLabelFieldCell: Rswift.ReuseIdentifier<FormLabelFieldCell> = Rswift.ReuseIdentifier(identifier: "formLabelFieldCell")
    /// Reuse identifier `formTextFieldCell`.
    static let formTextFieldCell: Rswift.ReuseIdentifier<FormTextFieldCell> = Rswift.ReuseIdentifier(identifier: "formTextFieldCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ContactCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContactCell
      
      let bundle = R.hostingBundle
      let identifier = "ContactCell"
      let name = "ContactCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactCell
      }
      
      fileprivate init() {}
    }
    
    struct _FormLabelFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FormLabelFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "formLabelFieldCell"
      let name = "FormLabelFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormLabelFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormLabelFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _FormTextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FormTextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "formTextFieldCell"
      let name = "FormTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
