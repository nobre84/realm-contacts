//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `add_button`.
    static let add_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_button")
    /// Image `blank_picture`.
    static let blank_picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "blank_picture")
    
    /// `UIImage(named: "add_button", bundle: ..., traitCollection: ...)`
    static func add_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blank_picture", bundle: ..., traitCollection: ...)`
    static func blank_picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blank_picture, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ContactCell`.
    static let contactCell = _R.nib._ContactCell()
    /// Nib `DualTextFieldCell`.
    static let dualTextFieldCell = _R.nib._DualTextFieldCell()
    /// Nib `ProfileFieldCell`.
    static let profileFieldCell = _R.nib._ProfileFieldCell()
    
    /// `UINib(name: "ContactCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactCell) instead")
    static func contactCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactCell)
    }
    
    /// `UINib(name: "DualTextFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dualTextFieldCell) instead")
    static func dualTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dualTextFieldCell)
    }
    
    /// `UINib(name: "ProfileFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileFieldCell) instead")
    static func profileFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileFieldCell)
    }
    
    static func contactCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactCell? {
      return R.nib.contactCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactCell
    }
    
    static func dualTextFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DualTextFieldCell? {
      return R.nib.dualTextFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DualTextFieldCell
    }
    
    static func profileFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileFieldCell? {
      return R.nib.profileFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileFieldCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactCell`.
    static let contactCell: Rswift.ReuseIdentifier<ContactCell> = Rswift.ReuseIdentifier(identifier: "ContactCell")
    /// Reuse identifier `DualTextFieldCell`.
    static let dualTextFieldCell: Rswift.ReuseIdentifier<DualTextFieldCell> = Rswift.ReuseIdentifier(identifier: "DualTextFieldCell")
    /// Reuse identifier `ProfileFieldCell`.
    static let profileFieldCell: Rswift.ReuseIdentifier<ProfileFieldCell> = Rswift.ReuseIdentifier(identifier: "ProfileFieldCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `ContactDetailController`, and contains static references to 1 segues.
    struct contactDetailController {
      /// Segue identifier `unwindToContactList`.
      static let unwindToContactList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ContactDetailController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToContactList")
      
      /// Optionally returns a typed version of segue `unwindToContactList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToContactList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ContactDetailController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.contactDetailController.unwindToContactList, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ContactListController`, and contains static references to 1 segues.
    struct contactListController {
      /// Segue identifier `editContact`.
      static let editContact: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ContactListController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "editContact")
      
      /// Optionally returns a typed version of segue `editContact`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editContact(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ContactListController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.contactListController.editContact, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ProfileFieldCell.validate()
    }
    
    struct _ContactCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContactCell
      
      let bundle = R.hostingBundle
      let identifier = "ContactCell"
      let name = "ContactCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactCell
      }
      
      fileprivate init() {}
    }
    
    struct _DualTextFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DualTextFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "DualTextFieldCell"
      let name = "DualTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DualTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DualTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileFieldCell"
      let name = "ProfileFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileFieldCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "blank_picture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blank_picture' is used in nib 'ProfileFieldCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
